<?php

class SplBlocksArray extends SplFixedArray
{
    const BLOCK_SIZE = 100000; // 10 000 elements

    private $_size;

    private $_uid = 267;

    private $_file;

    private $_blockOffset = 0;

    private $_maxlength = 0;

    private $_changed = array();

    public function current()
    {
        return parent::current(); // TODO: Change the autogenerated stub
    }

    public function __construct($size, $maxLength = 16)
    {
        $this->_uid = mt_rand(100, 999);
        $this->_file = fopen($this->_uid . '.arr', 'w+');
        $this->_size = $size;
        $this->_maxlength = $maxLength;
        return parent::__construct(min($size, self::BLOCK_SIZE)); // TODO: Change the autogenerated stub
    }

    function __destruct()
    {
        fclose($this->_file);
        unlink($this->_uid . '.arr');
    }

    public function offsetGet($index)
    {
        $this->changeBlockIfNeed($index);
        $index = $this->convertOffset($index);
        return parent::offsetGet($index); // TODO: Change the autogenerated stub
    }

    public function offsetSet($index, $newval)
    {
        // vaR_dump($index, $newval);

        $this->changeBlockIfNeed($index);
        //fseek($this->_file, $index * $this->_maxlength);
        //fwrite($this->_file, $newval, $this->_maxlength);
        $index = $this->convertOffset($index);
        $this->_changed[] = $index;
        parent::offsetSet($index, $newval); // TODO: Change the autogenerated stub
    }

    private function convertOffset($index)
    {
        return $index % self::BLOCK_SIZE;
    }

    private function offsetFile($index)
    {
        return self::BLOCK_SIZE * $this->_blockOffset * $this->_maxlength + $index * $this->_maxlength;
    }

    private function changeBlockIfNeed($pos)
    {
        $block = $this->getBlockOffset($pos);
        if ($block != $this->_blockOffset) {
            //fflush($this->_file);
            $this->loadBlock($block);
        }
    }

    private function loadBlock($block)
    {
        $this->saveBlock();
        fseek($this->_file, $curPos = $this->_maxlength * ($block * self::BLOCK_SIZE));
        for ($i = 0; $i < $this->getSize(); $i++) {
            parent::offsetSet($i, trim(fread($this->_file, $this->_maxlength)));
            $curPos += $this->_maxlength;
            fseek($this->_file, $curPos);
        }
        $this->_blockOffset = $block;
        parent::rewind();
    }

    private function saveBlock()
    {
        foreach ($this->_changed as $i) {
            fseek($this->_file, $this->offsetFile($i));
            fwrite($this->_file, parent::offsetGet($i), $this->_maxlength);
        }
        fflush($this->_file);
        $this->_changed = array();
    }

    private function getBlockOffset($pos)
    {
        return floor($pos / self::BLOCK_SIZE);
    }

    public function rewind()
    {
        $this->loadBlock(0);
        parent::rewind(); // TODO: Change the autogenerated stub
    }

    public function next()
    {
        $current = $this->key();
        if ($current + 1 >= self::BLOCK_SIZE) {
            $this->loadBlock($this->_blockOffset + 1);
        } else {
            parent::next(); // TODO: Change the autogenerated stub
        }
    }

    public function valid()
    {
        return $this->_blockOffset * $this->getSize() + $this->key() < $this->_size;
    }


    public function toArray()
    {
        $array = array();
        $offset = 0;
        $blocks = $this->getBlockOffset($this->_size - 1);
        for ($i = 0; $i <= $blocks; $i++) {
            $this->loadBlock($i);
            $array = array_merge($array, parent::toArray());
        }
        return $array;
    }


}
